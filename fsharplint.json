{
    "IgnoreFiles": [
        "assemblyinfo.*"
    ],
    "global": {
        "numIndentationSpaces": 4
    },
    "TypedItemSpacing": {
        "enabled": false,
        "config": {
            "typedItemStyle": "NoSpaces"
        }
    },
    "TypePrefixing": { "enabled": false },
    "UnionDefinitionIndentation": { "enabled": false },
    "ModuleDeclSpacing": { "enabled": false },
    "ClassMemberSpacing": { "enabled": false },
    "TupleCommaSpacing": { "enabled": false },
    "TupleIndentation": { "enabled": false },
    "TupleParentheses": { "enabled": false },
    "PatternMatchClausesOnNewLine": { "enabled": false },
    "PatternMatchOrClausesOnNewLine": { "enabled": false },
    "PatternMatchClauseIndentation": { "enabled": false },
    "PatternMatchExpressionIndentation": { "enabled": false },
    "RecursiveAsyncFunction": { "enabled": false },
    "RedundantNewKeyword": { "enabled": true },
    "NestedStatements": {
        "enabled": false,
        "config": {
            "depth": 8
        }
    },
    "ReimplementsFunction": { "enabled": true },
    "CanBeReplacedWithComposition": { "enabled": true },
    "RaiseWithSingleArgument": { "enabled": true },
    "NullArgWithSingleArgument": { "enabled": true },
    "InvalidOpWithSingleArgument": { "enabled": true },
    "InvalidArgWithTwoArguments": { "enabled": true },
    "FailwithfWithArgumentsMatchingFormatString": { "enabled": true },
    "MaxLinesInLambdaFunction": {
        "enabled": false,
        "config": {
            "maxLines": 7
        }
    },
    "MaxLinesInMatchLambdaFunction": {
        "enabled": false,
        "config": {
            "maxLines": 100
        }
    },
    "MaxLinesInValue": {
        "enabled": false,
        "config": {
            "maxLines": 100
        }
    },
    "MaxLinesInFunction": {
        "enabled": false,
        "config": {
            "maxLines": 100
        }
    },
    "MaxLinesInMember": {
        "enabled": false,
        "config": {
            "maxLines": 100
        }
    },
    "MaxLinesInConstructor": {
        "enabled": false,
        "config": {
            "maxLines": 100
        }
    },
    "MaxLinesInProperty": {
        "enabled": false,
        "config": {
            "maxLines": 70
        }
    },
    "MaxLinesInModule": {
        "enabled": false,
        "config": {
            "maxLines": 1000
        }
    },
    "MaxLinesInRecord": {
        "enabled": false,
        "config": {
            "maxLines": 500
        }
    },
    "MaxLinesInEnum": {
        "enabled": false,
        "config": {
            "maxLines": 500
        }
    },
    "MaxLinesInUnion": {
        "enabled": false,
        "config": {
            "maxLines": 500
        }
    },
    "MaxLinesInClass": {
        "enabled": false,
        "config": {
            "maxLines": 500
        }
    },
    "InterfaceNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None",
            "prefix": "I"
        }
    },
    "ExceptionNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None",
            "suffix": "Exception"
        }
    },
    "TypeNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "RecordFieldNames": {
        "enabled": false,
        "config":  {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "EnumCasesNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "UnionCasesNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "ModuleNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "LiteralNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "NamespaceNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "MemberNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "AllowPrefix"
        }
    },
    "ParameterNames": {
        "enabled": true,
        "config": {
            "naming": "CamelCase",
            "underscores": "AllowPrefix"
        }
    },
    "MeasureTypeNames": {
        "enabled": true,
        "config": {
            "underscores": "None"
        }
    },
    "ActivePatternNames": {
        "enabled": true,
        "config": {
            "naming": "PascalCase",
            "underscores": "None"
        }
    },
    "PublicValuesNames": {
        "enabled": true,
        "config": {
            "underscores": "AllowPrefix"
        }
    },
    "NonPublicValuesNames": {
        "enabled": true,
        "config": {
            "naming": "CamelCase",
            "underscores": "AllowPrefix"
        }
    },
    "MaxNumberOfItemsInTuple": {
        "enabled": false,
        "config": {
            "maxItems": 4
        }
    },
    "MaxNumberOfFunctionParameters": {
        "enabled": false,
        "config": {
            "maxItems": 5
        }
    },
    "MaxNumberOfMembers": {
        "enabled": false,
        "config": {
            "maxItems": 32
        }
    },
    "MaxNumberOfBooleanOperatorsInCondition": {
        "enabled": false,
        "config": {
            "maxItems": 4
        }
    },
    "FavourIgnoreOverLetWild": { "enabled": true },
    "WildcardNamedWithAsPattern": { "enabled": true },
    "UselessBinding": { "enabled": true },
    "TupleOfWildcards": { "enabled": true },
    "Indentation": {
        "enabled": false,
        "config": {
            "numberOfIndentationSpaces": 4
        }
    },
    "MaxCharactersOnLine": {
        "enabled": false,
        "config": {
            "maxCharactersOnLine": 120
        }
    },
    "TrailingWhitespaceOnLine": {
        "enabled": false,
        "config": {
            "numberOfSpacesAllowed": 1,
            "oneSpaceAllowedAfterOperator": true,
            "ignoreBlankLines": true
        }
    },
    "MaxLinesInFile": {
        "enabled": false,
        "config": {
            "maxLinesInFile": 1000
        }
    },
    "TrailingNewLineInFile": { "enabled": false },
    "NoTabCharacters": { "enabled": true },
    "Hints": {
        "add": [
            "not (a =  b) ===> a <> b",
            "not (a <> b) ===> a =  b",
            "not (a >  b) ===> a <= b",
            "not (a >= b) ===> a <  b",
            "not (a <  b) ===> a >= b",
            "not (a <= b) ===> a >  b",
            "compare x y <> 1 ===> x <= y",
            "compare x y = -1 ===> x < y",
            "compare x y <> -1 ===> x >= y",
            "compare x y = 1 ===> x > y",
            "compare x y <= 0 ===> x <= y",
            "compare x y <  0 ===> x <  y",
            "compare x y >= 0 ===> x >= y",
            "compare x y >  0 ===> x >  y",
            "compare x y =  0 ===> x =  y",
            "compare x y <> 0 ===> x <> y",

            "List.head (List.sort x) ===> List.min x",
            "List.head (List.sortBy f x) ===> List.minBy f x",

            "List.map f (List.map g x) ===> List.map (g >> f) x",
            "Array.map f (Array.map g x) ===> Array.map (g >> f) x",
            "Seq.map f (Seq.map g x) ===> Seq.map (g >> f) x",
            "List.nth x 0 ===> List.head x",
            "List.map f (List.replicate n x) ===> List.replicate n (f x)",
            "List.rev (List.rev x) ===> x",
            "Array.rev (Array.rev x) ===> x",
            "List.fold (@) [] x ===> List.concat x",
            "List.map id x ===> id x",
            "Array.map id x ===> id x",
            "Seq.map id x ===> id x",
            "(List.length x) = 0 ===> List.isEmpty x",
            "(Array.length x) = 0 ===> Array.isEmpty x",
            "(Seq.length x) = 0 ===> Seq.isEmpty x",
            "x = [] ===> List.isEmpty x",
            "x = [||] ===> Array.isEmpty x",
            "(List.length x) <> 0 ===> not (List.isEmpty x)",
            "(Array.length x) <> 0 ===> not (Array.isEmpty x)",
            "(Seq.length x) <> 0 ===> not (Seq.isEmpty x)",
            "(List.length x) > 0 ===> not (List.isEmpty x)",
            "(Array.length x) <> 0 ===> not (Array.isEmpty x)",
            "(Seq.length x) <> 0 ===> not (Seq.isEmpty x)",

            "List.concat (List.map f x) ===> List.collect f x",
            "Array.concat (Array.map f x) ===> Array.collect f x",
            "Seq.concat (Seq.map f x) ===> Seq.collect f x",

            "List.isEmpty (List.filter f x) ===> not (List.exists f x)",
            "Array.isEmpty (Array.filter f x) ===> not (Array.exists f x)",
            "Seq.isEmpty (Seq.filter f x) ===> not (Seq.exists f x)",
            "not (List.isEmpty (List.filter f x)) ===> List.exists f x",
            "not (Array.isEmpty (Array.filter f x)) ===> Array.exists f x",
            "not (Seq.isEmpty (Seq.filter f x)) ===> Seq.exists f x",

            "List.length x >= 0 ===> true",
            "Array.length x >= 0 ===> true",
            "Seq.length x >= 0 ===> true",

            "x = true ===> x",
            "x = false ===> not x",
            "true = a ===> a",
            "false = a ===> not a",
            "a <> true ===> not a",
            "a <> false ===> a",
            "true <> a ===> not a",
            "false <> a ===> a",
            "if a then true else false ===> a",
            "if a then false else true ===> not a",
            "not (not x) ===> x",

            "(fst x, snd x) ===> x",

            "true && x ===> x",
            "false && x ===> false",
            "true || x ===> true",
            "false || x ===> x",
            "not true ===> false",
            "not false ===> true",
            "fst (x, y) ===> x",
            "snd (x, y) ===> y",
            "List.fold f x [] ===> x",
            "Array.fold f x [||] ===> x",
            "List.foldBack f [] x ===> x",
            "Array.foldBack f [||] x ===> x",
            "x - 0 ===> x",
            "x * 1 ===> x",
            "x / 1 ===> x",

            "List.fold (+) 0 x ===> List.sum x",
            "Array.fold (+) 0 x ===> Array.sum x",
            "Seq.fold (+) 0 x ===> Seq.sum x",
            "List.sum (List.map x y) ===> List.sumBy x y",
            "Array.sum (Array.map x y) ===> Array.sumBy x y",
            "Seq.sum (Seq.map x y) ===> Seq.sumBy x y",
            "List.average (List.map x y) ===> List.averageBy x y",
            "Array.average (Array.map x y) ===> Array.averageBy x y",
            "Seq.average (Seq.map x y) ===> Seq.averageBy x y",
            "(List.take x y, List.skip x y) ===> List.splitAt x y",
            "(Array.take x y, Array.skip x y) ===> Array.splitAt x y",
            "(Seq.take x y, Seq.skip x y) ===> Seq.splitAt x y",

            "List.empty ===> []",
            "Array.empty ===> [||]",

            "x::[] ===> [x]",
            "pattern: x::[] ===> [x]",

            "x @ [] ===> x",

            "List.isEmpty [] ===> true",
            "Array.isEmpty [||] ===> true",

            "fun _ -> () ===> ignore",
            "fun x -> x ===> id",
            "id x ===> x",
            "id >> f ===> f",
            "f >> id ===> f",

            "x = null ===> isNull x",
            "null = x ===> isNull x",
            "x <> null ===> not (isNull x)",
            "null <> x ===> not (isNull x)",

            "Array.append a (Array.append b c) ===> Array.concat [|a; b; c|]"
        ]
    }
}